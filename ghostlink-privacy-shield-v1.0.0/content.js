(()=>{"use strict";class t{constructor(){this.services=[{name:"ChatGPT",domain:"chat.openai.com",selectors:{inputField:'textarea[data-id="root"], #prompt-textarea, textarea[placeholder*="message"]',submitButton:'button[data-testid="send-button"], button[aria-label="Send prompt"]',chatContainer:'[data-testid="conversation-turn"], .conversation-item'},enabled:!0},{name:"Claude",domain:"claude.ai",selectors:{inputField:'div[contenteditable="true"], textarea[placeholder*="Talk to Claude"]',submitButton:'button[aria-label="Send Message"], button[type="submit"]',chatContainer:".message, .chat-message"},enabled:!0},{name:"Google Bard",domain:"bard.google.com",selectors:{inputField:'textarea[aria-label*="Enter a prompt"], .ql-editor',submitButton:'button[aria-label="Submit"], button[data-test-id="send-button"]',chatContainer:".conversation-container, .response-container"},enabled:!0},{name:"Google Gemini",domain:"gemini.google.com",selectors:{inputField:'textarea[aria-label*="Enter a prompt"], .ql-editor, rich-textarea',submitButton:'button[aria-label="Submit"], button[data-test-id="send-button"]',chatContainer:".conversation-container, .response-container"},enabled:!0},{name:"Poe",domain:"poe.com",selectors:{inputField:'textarea[placeholder*="Talk to"], .ChatMessageInputContainer textarea',submitButton:'button[class*="ChatMessageSendButton"], button[aria-label="Send"]',chatContainer:".Message, .ChatMessage"},enabled:!0},{name:"You.com",domain:"you.com",selectors:{inputField:'textarea[placeholder*="Ask"], input[placeholder*="Ask"]',submitButton:'button[type="submit"], button[aria-label="Submit"]',chatContainer:".result, .chat-turn"},enabled:!0},{name:"Perplexity",domain:"perplexity.ai",selectors:{inputField:'textarea[placeholder*="Ask"], .search-input textarea',submitButton:'button[aria-label="Submit"], button[type="submit"]',chatContainer:".answer, .search-result"},enabled:!0},{name:"Character.AI",domain:"character.ai",selectors:{inputField:'textarea[placeholder*="Type a message"], .composer textarea',submitButton:'button[aria-label="Send"], button[type="submit"]',chatContainer:".message, .chat-message"},enabled:!0}]}detectService(){const t=window.location.hostname,e=this.services.find(e=>e.enabled&&t.includes(e.domain));return e?this.findInputField(e)?(console.log(`GhostLink: Successfully detected ${e.name}`),e):(console.log(`GhostLink: Service ${e.name} detected but input field not found`),null):null}findInputField(t){const e=t.selectors.inputField.split(", ");for(const t of e){const e=document.querySelector(t.trim());if(e&&this.isValidInputField(e))return e}return null}findSubmitButton(t){const e=t.selectors.submitButton.split(", ");for(const t of e){const e=document.querySelector(t.trim());if(e&&this.isValidSubmitButton(e))return e}return null}findAllInputFields(t){const e=t.selectors.inputField.split(", "),n=[];for(const t of e)document.querySelectorAll(t.trim()).forEach(t=>{this.isValidInputField(t)&&n.push(t)});return n}isValidInputField(t){if(!t)return!1;const e=window.getComputedStyle(t);if("none"===e.display||"hidden"===e.visibility)return!1;if("TEXTAREA"===t.tagName)return!t.hasAttribute("disabled")&&!t.hasAttribute("readonly");if("INPUT"===t.tagName){const e=t;return"text"===e.type&&!e.disabled&&!e.readOnly}return!!t.hasAttribute("contenteditable")&&"true"===t.getAttribute("contenteditable")}isValidSubmitButton(t){if(!t)return!1;const e=window.getComputedStyle(t);return"none"!==e.display&&"hidden"!==e.visibility&&("BUTTON"===t.tagName?!t.hasAttribute("disabled"):!!("button"===t.getAttribute("role")||t.classList.contains("button")||t.getAttribute("aria-label")?.toLowerCase().includes("send")||t.getAttribute("aria-label")?.toLowerCase().includes("submit")))}getServiceByName(t){return this.services.find(e=>e.name.toLowerCase()===t.toLowerCase())||null}getAllServices(){return[...this.services]}addService(t){const e=this.services.findIndex(e=>e.domain===t.domain);e>=0?this.services[e]=t:this.services.push(t)}isAIService(){return null!==this.detectService()}getInputMonitoringConfig(t){return{ChatGPT:{monitorKeystrokes:!0,interceptOnSubmit:!0,interceptOnEnter:!0,debounceMs:300},Claude:{monitorKeystrokes:!0,interceptOnSubmit:!0,interceptOnEnter:!0,debounceMs:300},"Google Bard":{monitorKeystrokes:!1,interceptOnSubmit:!0,interceptOnEnter:!1,debounceMs:500},"Google Gemini":{monitorKeystrokes:!1,interceptOnSubmit:!0,interceptOnEnter:!1,debounceMs:500},Poe:{monitorKeystrokes:!0,interceptOnSubmit:!0,interceptOnEnter:!0,debounceMs:300},"You.com":{monitorKeystrokes:!0,interceptOnSubmit:!0,interceptOnEnter:!0,debounceMs:300},Perplexity:{monitorKeystrokes:!0,interceptOnSubmit:!0,interceptOnEnter:!0,debounceMs:300},"Character.AI":{monitorKeystrokes:!0,interceptOnSubmit:!0,interceptOnEnter:!0,debounceMs:300}}[t.name]||{monitorKeystrokes:!0,interceptOnSubmit:!0,interceptOnEnter:!0,debounceMs:300}}async waitForService(t=1e4){const e=Date.now();for(;Date.now()-e<t;){const t=this.detectService();if(t)return t;await new Promise(t=>setTimeout(t,500))}return null}}class e{constructor(){this.isActive=!1,this.currentService=null,this.callbacks=null,this.interceptedElements=new Set,this.originalSubmitHandlers=new WeakMap,this.debounceTimers=new WeakMap}setup(t,e){this.currentService=t,this.callbacks=e,this.isActive=!0,console.log(`GhostLink: Setting up input interception for ${t.name}`),this.cleanup(),this.setupInputFieldInterception(),this.setupSubmitButtonInterception(),this.setupKeyboardInterception(),console.log(`GhostLink: Input interception active for ${t.name}`)}disable(){this.isActive=!1,this.cleanup(),console.log("GhostLink: Input interception disabled")}cleanup(){this.interceptedElements.forEach(t=>{const e=this.originalSubmitHandlers.get(t);e&&(t.removeEventListener("click",e),this.originalSubmitHandlers.delete(t)),t.removeEventListener("keydown",this.handleKeyDown.bind(this)),t.removeEventListener("paste",this.handlePaste.bind(this))}),this.interceptedElements.clear(),this.debounceTimers=new WeakMap}setupInputFieldInterception(){this.currentService&&this.findInputFields().forEach(t=>{this.interceptedElements.add(t),t.addEventListener("paste",this.handlePaste.bind(this)),t.addEventListener("keydown",this.handleKeyDown.bind(this)),console.log("GhostLink: Set up interception for input field",t)})}setupSubmitButtonInterception(){this.currentService&&this.findSubmitButtons().forEach(t=>{this.interceptedElements.add(t);const e=this.createSubmitHandler(t);this.originalSubmitHandlers.set(t,e),t.addEventListener("click",e,!0),console.log("GhostLink: Set up interception for submit button",t)})}setupKeyboardInterception(){this.currentService&&document.addEventListener("keydown",this.handleGlobalKeyDown.bind(this),!0)}findInputFields(){if(!this.currentService)return[];const t=this.currentService.selectors.inputField.split(", "),e=[];return t.forEach(t=>{document.querySelectorAll(t.trim()).forEach(t=>{this.isValidInputField(t)&&e.push(t)})}),e}findSubmitButtons(){if(!this.currentService)return[];const t=this.currentService.selectors.submitButton.split(", "),e=[];return t.forEach(t=>{document.querySelectorAll(t.trim()).forEach(t=>{this.isValidSubmitButton(t)&&e.push(t)})}),e}createSubmitHandler(t){return async e=>{if(this.isActive&&this.callbacks)try{const n=this.findAssociatedInputField(t);if(!n)return void console.log("GhostLink: No associated input field found for submit button");const i=this.extractTextFromElement(n);if(!i.trim())return void console.log("GhostLink: Empty query, skipping interception");console.log("GhostLink: Intercepting submit for query:",i.substring(0,100)+"..."),e.preventDefault(),e.stopPropagation();const s=await this.callbacks.onQueryIntercept(i,n);this.updateInputField(n,s),setTimeout(()=>{this.triggerOriginalSubmit(t,n)},100),this.callbacks.onQueryProcessed(i,s)}catch(t){console.error("GhostLink: Error in submit handler:",t)}}}handleKeyDown(t){if(!this.isActive||!this.callbacks)return;const e=t.target;"Enter"!==t.key||t.shiftKey||this.shouldInterceptEnterKey(e)&&this.handleEnterKeySubmit(t,e)}handleGlobalKeyDown(t){if(this.isActive&&(t.ctrlKey||t.metaKey)&&"Enter"===t.key){const e=document.activeElement;e&&this.isValidInputField(e)&&this.handleEnterKeySubmit(t,e)}}async handleEnterKeySubmit(t,e){if(this.callbacks)try{const n=this.extractTextFromElement(e);if(!n.trim())return;console.log("GhostLink: Intercepting Enter key submit for query:",n.substring(0,100)+"..."),t.preventDefault(),t.stopPropagation();const i=await this.callbacks.onQueryIntercept(n,e);this.updateInputField(e,i),setTimeout(()=>{this.triggerEnterKeySubmit(e)},100),this.callbacks.onQueryProcessed(n,i)}catch(t){console.error("GhostLink: Error in Enter key handler:",t)}}handlePaste(t){this.isActive&&this.callbacks&&(t.target,(t.clipboardData?.getData("text")||"").length>100&&console.log("GhostLink: Large paste detected, will process on submit"))}extractTextFromElement(t){return"TEXTAREA"===t.tagName||"INPUT"===t.tagName?t.value:t.hasAttribute("contenteditable")&&(t.textContent||t.innerText)||""}updateInputField(t,e){"TEXTAREA"===t.tagName||"INPUT"===t.tagName?(t.value=e,t.dispatchEvent(new Event("input",{bubbles:!0})),t.dispatchEvent(new Event("change",{bubbles:!0}))):t.hasAttribute("contenteditable")&&(t.textContent=e,t.dispatchEvent(new Event("input",{bubbles:!0})))}findAssociatedInputField(t){const e=t.closest("form");if(e){const t=e.querySelector(this.currentService?.selectors.inputField||"");if(t&&this.isValidInputField(t))return t}const n=t.closest("div, section, main");if(n){const t=n.querySelector(this.currentService?.selectors.inputField||"");if(t&&this.isValidInputField(t))return t}const i=this.findInputFields();return i.length>0?i[0]:null}triggerOriginalSubmit(t,e){const n=new MouseEvent("click",{bubbles:!0,cancelable:!0,view:window}),i=this.isActive;this.isActive=!1,t.dispatchEvent(n),this.isActive=i}triggerEnterKeySubmit(t){const e=new KeyboardEvent("keydown",{key:"Enter",code:"Enter",bubbles:!0,cancelable:!0}),n=this.isActive;this.isActive=!1,t.dispatchEvent(e),this.isActive=n}shouldInterceptEnterKey(t){return this.isValidInputField(t)}isValidInputField(t){if(!t)return!1;const e=window.getComputedStyle(t);if("none"===e.display||"hidden"===e.visibility)return!1;if("TEXTAREA"===t.tagName)return!t.hasAttribute("disabled")&&!t.hasAttribute("readonly");if("INPUT"===t.tagName){const e=t;return"text"===e.type&&!e.disabled&&!e.readOnly}return!!t.hasAttribute("contenteditable")&&"true"===t.getAttribute("contenteditable")}isValidSubmitButton(t){if(!t)return!1;const e=window.getComputedStyle(t);return"none"!==e.display&&"hidden"!==e.visibility&&("BUTTON"===t.tagName?!t.hasAttribute("disabled"):"button"===t.getAttribute("role")||t.classList.contains("button"))}}class n{constructor(){this.overlay=null,this.callbacks=null,this.isVisible=!1,this.stats={piiRemoved:0,anonymityScore:0,noiseAdded:!1}}setup(t){this.callbacks=t,this.createOverlay(),this.attachEventListeners(),console.log("GhostLink: Privacy overlay initialized")}createOverlay(){this.removeOverlay(),this.overlay=document.createElement("div"),this.overlay.id="ghostlink-privacy-overlay",this.overlay.innerHTML=this.getOverlayHTML(),this.addOverlayStyles(),document.body.appendChild(this.overlay),this.hideOverlay()}getOverlayHTML(){return'\n      <div class="ghostlink-overlay-container">\n        \x3c!-- Main Toggle Button --\x3e\n        <div class="ghostlink-toggle-btn" id="ghostlink-toggle">\n          <div class="ghostlink-shield-icon">🛡️</div>\n          <div class="ghostlink-status-indicator" id="ghostlink-status"></div>\n        </div>\n        \n        \x3c!-- Expanded Panel --\x3e\n        <div class="ghostlink-panel" id="ghostlink-panel">\n          <div class="ghostlink-panel-header">\n            <div class="ghostlink-title">\n              <span class="ghostlink-logo">🛡️</span>\n              <span>GhostLink</span>\n            </div>\n            <button class="ghostlink-close-btn" id="ghostlink-close">×</button>\n          </div>\n          \n          <div class="ghostlink-panel-content">\n            \x3c!-- Privacy Status --\x3e\n            <div class="ghostlink-status-section">\n              <div class="ghostlink-status-item">\n                <span class="ghostlink-label">Privacy Protection:</span>\n                <span class="ghostlink-value" id="ghostlink-privacy-status">Active</span>\n              </div>\n              <div class="ghostlink-status-item">\n                <span class="ghostlink-label">Anonymity Score:</span>\n                <span class="ghostlink-value" id="ghostlink-anonymity-score">--</span>\n              </div>\n            </div>\n            \n            \x3c!-- Quick Stats --\x3e\n            <div class="ghostlink-stats-section">\n              <div class="ghostlink-stat-item">\n                <div class="ghostlink-stat-value" id="ghostlink-pii-count">0</div>\n                <div class="ghostlink-stat-label">PII Removed</div>\n              </div>\n              <div class="ghostlink-stat-item">\n                <div class="ghostlink-stat-value" id="ghostlink-noise-status">No</div>\n                <div class="ghostlink-stat-label">Noise Added</div>\n              </div>\n            </div>\n            \n            \x3c!-- Controls --\x3e\n            <div class="ghostlink-controls-section">\n              <button class="ghostlink-btn ghostlink-btn-primary" id="ghostlink-toggle-privacy">\n                <span id="ghostlink-toggle-text">Disable Protection</span>\n              </button>\n              <button class="ghostlink-btn ghostlink-btn-secondary" id="ghostlink-show-stats">\n                View Details\n              </button>\n            </div>\n          </div>\n        </div>\n        \n        \x3c!-- Processing Indicator --\x3e\n        <div class="ghostlink-processing" id="ghostlink-processing">\n          <div class="ghostlink-spinner"></div>\n          <span>Processing...</span>\n        </div>\n        \n        \x3c!-- Notification --\x3e\n        <div class="ghostlink-notification" id="ghostlink-notification">\n          <span class="ghostlink-notification-text"></span>\n        </div>\n      </div>\n    '}addOverlayStyles(){const t="ghostlink-overlay-styles",e=document.getElementById(t);e&&e.remove();const n=document.createElement("style");n.id=t,n.textContent="\n      #ghostlink-privacy-overlay {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        z-index: 2147483647;\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n        font-size: 14px;\n        line-height: 1.4;\n        color: #333;\n        pointer-events: none;\n      }\n      \n      #ghostlink-privacy-overlay * {\n        box-sizing: border-box;\n        margin: 0;\n        padding: 0;\n      }\n      \n      .ghostlink-overlay-container {\n        position: relative;\n        pointer-events: auto;\n      }\n      \n      /* Toggle Button */\n      .ghostlink-toggle-btn {\n        width: 48px;\n        height: 48px;\n        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n        border-radius: 24px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: pointer;\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n        transition: all 0.3s ease;\n        position: relative;\n        overflow: hidden;\n      }\n      \n      .ghostlink-toggle-btn:hover {\n        transform: scale(1.05);\n        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.2);\n      }\n      \n      .ghostlink-shield-icon {\n        font-size: 20px;\n        filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.3));\n      }\n      \n      .ghostlink-status-indicator {\n        position: absolute;\n        top: 2px;\n        right: 2px;\n        width: 12px;\n        height: 12px;\n        border-radius: 6px;\n        background: #10b981;\n        border: 2px solid white;\n        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\n      }\n      \n      .ghostlink-status-indicator.inactive {\n        background: #ef4444;\n      }\n      \n      /* Panel */\n      .ghostlink-panel {\n        position: absolute;\n        top: 0;\n        right: 0;\n        width: 280px;\n        background: white;\n        border-radius: 12px;\n        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);\n        border: 1px solid rgba(0, 0, 0, 0.08);\n        opacity: 0;\n        visibility: hidden;\n        transform: translateY(-10px) scale(0.95);\n        transition: all 0.3s ease;\n        backdrop-filter: blur(10px);\n      }\n      \n      .ghostlink-panel.visible {\n        opacity: 1;\n        visibility: visible;\n        transform: translateY(0) scale(1);\n      }\n      \n      .ghostlink-panel-header {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        padding: 16px;\n        border-bottom: 1px solid rgba(0, 0, 0, 0.08);\n        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n        color: white;\n        border-radius: 12px 12px 0 0;\n      }\n      \n      .ghostlink-title {\n        display: flex;\n        align-items: center;\n        gap: 8px;\n        font-weight: 600;\n        font-size: 16px;\n      }\n      \n      .ghostlink-logo {\n        font-size: 18px;\n      }\n      \n      .ghostlink-close-btn {\n        background: none;\n        border: none;\n        color: white;\n        font-size: 20px;\n        cursor: pointer;\n        padding: 4px;\n        border-radius: 4px;\n        transition: background-color 0.2s ease;\n      }\n      \n      .ghostlink-close-btn:hover {\n        background: rgba(255, 255, 255, 0.2);\n      }\n      \n      .ghostlink-panel-content {\n        padding: 16px;\n      }\n      \n      /* Status Section */\n      .ghostlink-status-section {\n        margin-bottom: 16px;\n      }\n      \n      .ghostlink-status-item {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 8px;\n      }\n      \n      .ghostlink-label {\n        color: #666;\n        font-size: 13px;\n      }\n      \n      .ghostlink-value {\n        font-weight: 600;\n        color: #333;\n      }\n      \n      /* Stats Section */\n      .ghostlink-stats-section {\n        display: flex;\n        gap: 16px;\n        margin-bottom: 16px;\n        padding: 12px;\n        background: #f8fafc;\n        border-radius: 8px;\n      }\n      \n      .ghostlink-stat-item {\n        flex: 1;\n        text-align: center;\n      }\n      \n      .ghostlink-stat-value {\n        font-size: 20px;\n        font-weight: 700;\n        color: #667eea;\n        margin-bottom: 4px;\n      }\n      \n      .ghostlink-stat-label {\n        font-size: 11px;\n        color: #666;\n        text-transform: uppercase;\n        letter-spacing: 0.5px;\n      }\n      \n      /* Controls Section */\n      .ghostlink-controls-section {\n        display: flex;\n        gap: 8px;\n      }\n      \n      .ghostlink-btn {\n        flex: 1;\n        padding: 10px 16px;\n        border: none;\n        border-radius: 6px;\n        font-size: 13px;\n        font-weight: 500;\n        cursor: pointer;\n        transition: all 0.2s ease;\n      }\n      \n      .ghostlink-btn-primary {\n        background: #667eea;\n        color: white;\n      }\n      \n      .ghostlink-btn-primary:hover {\n        background: #5a67d8;\n      }\n      \n      .ghostlink-btn-secondary {\n        background: #e2e8f0;\n        color: #4a5568;\n      }\n      \n      .ghostlink-btn-secondary:hover {\n        background: #cbd5e0;\n      }\n      \n      /* Processing Indicator */\n      .ghostlink-processing {\n        position: absolute;\n        top: 60px;\n        right: 0;\n        background: white;\n        padding: 12px 16px;\n        border-radius: 8px;\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n        display: none;\n        align-items: center;\n        gap: 8px;\n        font-size: 13px;\n        color: #666;\n      }\n      \n      .ghostlink-processing.visible {\n        display: flex;\n      }\n      \n      .ghostlink-spinner {\n        width: 16px;\n        height: 16px;\n        border: 2px solid #e2e8f0;\n        border-top: 2px solid #667eea;\n        border-radius: 50%;\n        animation: ghostlink-spin 1s linear infinite;\n      }\n      \n      @keyframes ghostlink-spin {\n        0% { transform: rotate(0deg); }\n        100% { transform: rotate(360deg); }\n      }\n      \n      /* Notification */\n      .ghostlink-notification {\n        position: absolute;\n        top: 60px;\n        right: 0;\n        background: white;\n        padding: 12px 16px;\n        border-radius: 8px;\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n        opacity: 0;\n        visibility: hidden;\n        transform: translateY(-10px);\n        transition: all 0.3s ease;\n        font-size: 13px;\n        max-width: 250px;\n      }\n      \n      .ghostlink-notification.visible {\n        opacity: 1;\n        visibility: visible;\n        transform: translateY(0);\n      }\n      \n      .ghostlink-notification.success {\n        border-left: 4px solid #10b981;\n        color: #065f46;\n      }\n      \n      .ghostlink-notification.warning {\n        border-left: 4px solid #f59e0b;\n        color: #92400e;\n      }\n      \n      .ghostlink-notification.error {\n        border-left: 4px solid #ef4444;\n        color: #991b1b;\n      }\n      \n      /* Responsive */\n      @media (max-width: 768px) {\n        #ghostlink-privacy-overlay {\n          top: 10px;\n          right: 10px;\n        }\n        \n        .ghostlink-panel {\n          width: 260px;\n        }\n      }\n    ",document.head.appendChild(n)}attachEventListeners(){if(!this.overlay)return;const t=this.overlay.querySelector("#ghostlink-toggle");t?.addEventListener("click",()=>{this.togglePanel()});const e=this.overlay.querySelector("#ghostlink-close");e?.addEventListener("click",()=>{this.hidePanel()});const n=this.overlay.querySelector("#ghostlink-toggle-privacy");n?.addEventListener("click",()=>{this.callbacks?.onTogglePrivacy()});const i=this.overlay.querySelector("#ghostlink-show-stats");i?.addEventListener("click",()=>{this.callbacks?.onShowStats()}),document.addEventListener("click",t=>{this.isVisible&&!this.overlay?.contains(t.target)&&this.hidePanel()})}togglePanel(){this.isVisible?this.hidePanel():this.showPanel()}showPanel(){if(!this.overlay)return;const t=this.overlay.querySelector(".ghostlink-panel");t?.classList.add("visible"),this.isVisible=!0}hidePanel(){if(!this.overlay)return;const t=this.overlay.querySelector(".ghostlink-panel");t?.classList.remove("visible"),this.isVisible=!1}showOverlay(){this.overlay&&(this.overlay.style.display="block")}hideOverlay(){this.overlay&&(this.overlay.style.display="none")}updateStats(t){if(this.stats={...t},!this.overlay)return;const e=this.overlay.querySelector("#ghostlink-pii-count");e&&(e.textContent=t.piiRemoved.toString());const n=this.overlay.querySelector("#ghostlink-anonymity-score");n&&(n.textContent=`${t.anonymityScore}%`);const i=this.overlay.querySelector("#ghostlink-noise-status");i&&(i.textContent=t.noiseAdded?"Yes":"No")}updatePrivacyStatus(t){if(!this.overlay)return;const e=this.overlay.querySelector(".ghostlink-status-indicator");e&&(t?e.classList.remove("inactive"):e.classList.add("inactive"));const n=this.overlay.querySelector("#ghostlink-privacy-status");n&&(n.textContent=t?"Active":"Inactive");const i=this.overlay.querySelector("#ghostlink-toggle-text");i&&(i.textContent=t?"Disable Protection":"Enable Protection")}showProcessingIndicator(){if(!this.overlay)return;const t=this.overlay.querySelector("#ghostlink-processing");t?.classList.add("visible")}hideProcessingIndicator(){if(!this.overlay)return;const t=this.overlay.querySelector("#ghostlink-processing");t?.classList.remove("visible")}showNotification(t,e="success"){if(!this.overlay)return;const n=this.overlay.querySelector("#ghostlink-notification"),i=this.overlay.querySelector(".ghostlink-notification-text");n&&i&&(i.textContent=t,n.className=`ghostlink-notification visible ${e}`,setTimeout(()=>{n.classList.remove("visible")},3e3))}showStatsModal(t){this.showNotification(`Total queries: ${t.totalQueries}, PII removed: ${t.totalPIIRemoved}`,"success")}removeOverlay(){this.overlay&&(this.overlay.remove(),this.overlay=null);const t=document.getElementById("ghostlink-overlay-styles");t&&t.remove()}destroy(){this.removeOverlay(),this.callbacks=null,this.isVisible=!1}}class i{constructor(){this.config=null,this.isEnabled=!1,this.aiServiceDetector=new t,this.inputInterceptor=new e,this.privacyOverlay=new n,this.init()}async init(){console.log("GhostLink: Content script initializing...");try{const t=this.aiServiceDetector.detectService();if(!t)return void console.log("GhostLink: Not an AI service, content script inactive");console.log(`GhostLink: Detected AI service: ${t.name}`),await this.loadConfig(),this.setupInputInterception(t),this.setupPrivacyOverlay(),this.setupMessageListeners(),this.setupMutationObserver(),console.log("GhostLink: Content script initialized successfully")}catch(t){console.error("GhostLink: Error initializing content script:",t)}}async loadConfig(){try{const t=await this.sendMessage({type:"GET_PRIVACY_CONFIG"});t.success&&(this.config=t.data,this.isEnabled=this.config?.enabled||!1,console.log("GhostLink: Configuration loaded",this.config))}catch(t){console.error("GhostLink: Error loading config:",t)}}setupInputInterception(t){this.config?.enabled&&this.inputInterceptor.setup(t,{onQueryIntercept:this.handleQueryIntercept.bind(this),onQueryProcessed:this.handleQueryProcessed.bind(this)})}setupPrivacyOverlay(){this.config?.enabled&&this.privacyOverlay.setup({onTogglePrivacy:this.handleTogglePrivacy.bind(this),onShowStats:this.handleShowStats.bind(this)})}setupMessageListeners(){chrome.runtime.onMessage.addListener((t,e,n)=>(this.handleMessage(t,e,n),!0))}setupMutationObserver(){new MutationObserver(t=>{let e=!1;t.forEach(t=>{"childList"===t.type&&t.addedNodes.forEach(t=>{if(t.nodeType===Node.ELEMENT_NODE){const n=t;(n.matches('textarea, input[type="text"], form')||n.querySelector('textarea, input[type="text"], form'))&&(e=!0)}})}),e&&(console.log("GhostLink: DOM changes detected, reinitializing..."),setTimeout(()=>this.reinitializeInterception(),100))}).observe(document.body,{childList:!0,subtree:!0})}async reinitializeInterception(){const t=this.aiServiceDetector.detectService();t&&this.config?.enabled&&this.inputInterceptor.setup(t,{onQueryIntercept:this.handleQueryIntercept.bind(this),onQueryProcessed:this.handleQueryProcessed.bind(this)})}async handleQueryIntercept(t,e){if(!this.config?.enabled)return t;try{console.log("GhostLink: Intercepting query for privacy processing"),this.privacyOverlay.showProcessingIndicator();const e=await this.sendMessage({type:"PROCESS_QUERY",data:{originalQuery:t,site:window.location.hostname}});if(e.success){const n=e.data;return await this.sendMessage({type:"STORE_RECEIPT",data:{id:`receipt_${Date.now()}`,timestamp:Date.now(),originalHash:await this.generateHash(t),processedHash:await this.generateHash(n.processedQuery),site:window.location.hostname,piiRemoved:n.piiRemoved,noiseAdded:n.noiseAdded,anonymityScore:n.anonymityScore,privacyLevel:this.config.privacyLevel}}),this.privacyOverlay.updateStats({piiRemoved:n.piiRemoved,anonymityScore:n.anonymityScore,noiseAdded:n.noiseAdded}),console.log("GhostLink: Query processed successfully",n),n.processedQuery}return console.error("GhostLink: Error processing query:",e.error),t}catch(e){return console.error("GhostLink: Error in query interception:",e),t}finally{this.privacyOverlay.hideProcessingIndicator()}}handleQueryProcessed(t,e){console.log("GhostLink: Query processing completed"),this.privacyOverlay.showNotification("Privacy protection applied","success")}async handleTogglePrivacy(){this.config&&(this.config.enabled=!this.config.enabled,this.isEnabled=this.config.enabled,await this.sendMessage({type:"UPDATE_PRIVACY_CONFIG",data:this.config}),this.isEnabled?(await this.reinitializeInterception(),this.privacyOverlay.showNotification("Privacy protection enabled","success")):(this.inputInterceptor.disable(),this.privacyOverlay.showNotification("Privacy protection disabled","warning")))}async handleShowStats(){try{const t=await this.sendMessage({type:"GET_PRIVACY_STATS"});t.success&&this.privacyOverlay.showStatsModal(t.data)}catch(t){console.error("GhostLink: Error getting stats:",t)}}async handleMessage(t,e,n){try{switch(t.type){case"CONFIG_UPDATED":await this.loadConfig(),await this.reinitializeInterception(),n({success:!0});break;case"GET_PAGE_INFO":const t=this.aiServiceDetector.detectService();n({success:!0,data:{isAIService:!!t,serviceName:t?.name,url:window.location.href,enabled:this.isEnabled}});break;case"TOGGLE_PRIVACY":await this.handleTogglePrivacy(),n({success:!0});break;default:n({success:!1,error:"Unknown message type"})}}catch(t){console.error("GhostLink: Error handling message:",t),n({success:!1,error:t instanceof Error?t.message:"Unknown error"})}}async sendMessage(t){return new Promise(e=>{chrome.runtime.sendMessage(t,t=>{e(t||{success:!1,error:"No response"})})})}async generateHash(t){const e=(new TextEncoder).encode(t),n=await crypto.subtle.digest("SHA-256",e);return Array.from(new Uint8Array(n)).map(t=>t.toString(16).padStart(2,"0")).join("")}}"loading"===document.readyState?document.addEventListener("DOMContentLoaded",()=>{new i}):new i})();