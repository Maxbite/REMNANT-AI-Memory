(()=>{"use strict";class e{constructor(){this.config=null,this.stats=null,this.currentTab=null,this.init()}async init(){console.log("GhostLink Popup: Initializing...");try{this.showLoading(!0),await this.getCurrentTab(),await Promise.all([this.loadConfig(),this.loadStats()]),this.setupEventListeners(),this.updateUI(),console.log("GhostLink Popup: Initialized successfully")}catch(e){console.error("GhostLink Popup: Initialization error:",e),this.showNotification("Failed to load privacy settings","error")}finally{this.showLoading(!1)}}async getCurrentTab(){const e=await chrome.tabs.query({active:!0,currentWindow:!0});this.currentTab=e[0]||null}async loadConfig(){try{const e=await this.sendMessage({type:"GET_PRIVACY_CONFIG"});if(!e.success)throw new Error(e.error||"Failed to load config");this.config=e.data,console.log("GhostLink Popup: Config loaded",this.config)}catch(e){throw console.error("GhostLink Popup: Error loading config:",e),e}}async loadStats(){try{const e=await this.sendMessage({type:"GET_PRIVACY_STATS"});if(!e.success)throw new Error(e.error||"Failed to load stats");this.stats=e.data,console.log("GhostLink Popup: Stats loaded",this.stats)}catch(e){throw console.error("GhostLink Popup: Error loading stats:",e),e}}setupEventListeners(){const e=document.getElementById("privacy-toggle");e?.addEventListener("click",this.handlePrivacyToggle.bind(this)),document.querySelectorAll('input[name="privacy-level"]').forEach(e=>{e.addEventListener("change",this.handlePrivacyLevelChange.bind(this))}),document.getElementById("view-receipts-btn")?.addEventListener("click",this.handleViewReceipts.bind(this)),document.getElementById("export-data-btn")?.addEventListener("click",this.handleExportData.bind(this)),document.getElementById("settings-btn")?.addEventListener("click",this.showSettingsModal.bind(this)),document.getElementById("settings-cancel")?.addEventListener("click",this.hideSettingsModal.bind(this)),document.getElementById("settings-save")?.addEventListener("click",this.handleSaveSettings.bind(this)),document.querySelectorAll(".modal-close").forEach(e=>{e.addEventListener("click",this.hideAllModals.bind(this))}),document.getElementById("help-btn")?.addEventListener("click",this.handleHelp.bind(this)),document.getElementById("about-btn")?.addEventListener("click",this.handleAbout.bind(this)),document.getElementById("feedback-btn")?.addEventListener("click",this.handleFeedback.bind(this)),document.querySelector(".notification-close")?.addEventListener("click",this.hideNotification.bind(this)),document.addEventListener("click",e=>{e.target.classList.contains("modal")&&this.hideAllModals()})}updateUI(){this.config&&(this.updatePrivacyStatus(),this.updateCurrentSite(),this.updatePrivacyLevel(),this.updateMetrics(),this.updateSettingsModal())}updatePrivacyStatus(){if(!this.config)return;const e=document.getElementById("status-dot"),t=document.getElementById("status-text"),i=document.getElementById("privacy-toggle");this.config.enabled?(e?.classList.add("active"),t&&(t.textContent="Privacy Protection Active"),i?.classList.add("active")):(e?.classList.remove("active"),t&&(t.textContent="Privacy Protection Inactive"),i?.classList.remove("active"))}updateCurrentSite(){const e=document.getElementById("current-site");if(e&&this.currentTab?.url)try{const t=new URL(this.currentTab.url);e.textContent=t.hostname}catch{e.textContent="Unknown"}}updatePrivacyLevel(){if(!this.config)return;const e=document.getElementById("privacy-level");if(e){const t=this.config.privacyLevel.charAt(0).toUpperCase()+this.config.privacyLevel.slice(1);e.textContent=t}const t=document.querySelector(`input[value="${this.config.privacyLevel}"]`);t&&(t.checked=!0)}updateMetrics(){if(!this.stats)return;const e=document.getElementById("anonymity-score");e&&(e.textContent=`${this.stats.avgAnonymityScore||0}%`);const t=document.getElementById("pii-removed");t&&(t.textContent=this.stats.totalPIIRemoved.toString());const i=document.getElementById("noise-added");i&&(i.textContent=this.config?.enableDifferentialPrivacy?"Yes":"No");const n=document.getElementById("total-queries");n&&(n.textContent=this.stats.totalQueries.toString())}updateSettingsModal(){if(!this.config)return;[{id:"enable-pii-detection",value:this.config.enablePIIDetection},{id:"enable-differential-privacy",value:this.config.enableDifferentialPrivacy},{id:"enable-semantic-generalization",value:this.config.enableSemanticGeneralization},{id:"enable-crypto-receipts",value:this.config.enableCryptoReceipts},{id:"enable-relay-routing",value:this.config.enableRelayRouting}].forEach(({id:e,value:t})=>{const i=document.getElementById(e);i&&(i.checked=t)});const e=document.getElementById("noise-level");e&&(e.value=this.config.noiseLevel.toString());const t=document.getElementById("retention-days");t&&(t.value=this.config.retentionDays.toString())}async handlePrivacyToggle(){if(this.config)try{this.showLoading(!0),this.config.enabled=!this.config.enabled;const e=await this.sendMessage({type:"UPDATE_PRIVACY_CONFIG",data:this.config});if(!e.success)throw new Error(e.error||"Failed to update configuration");this.updatePrivacyStatus(),this.showNotification(this.config.enabled?"Privacy protection enabled":"Privacy protection disabled",this.config.enabled?"success":"warning"),this.currentTab?.id&&chrome.tabs.sendMessage(this.currentTab.id,{type:"CONFIG_UPDATED"})}catch(e){console.error("GhostLink Popup: Error toggling privacy:",e),this.showNotification("Failed to update privacy settings","error"),this.config&&(this.config.enabled=!this.config.enabled,this.updatePrivacyStatus())}finally{this.showLoading(!1)}}async handlePrivacyLevelChange(e){const t=e.target;if(this.config&&t.checked)try{this.showLoading(!0),this.config.privacyLevel=t.value;const e=await this.sendMessage({type:"UPDATE_PRIVACY_CONFIG",data:this.config});if(!e.success)throw new Error(e.error||"Failed to update privacy level");this.updatePrivacyLevel(),this.showNotification(`Privacy level set to ${this.config.privacyLevel}`,"success"),this.currentTab?.id&&chrome.tabs.sendMessage(this.currentTab.id,{type:"CONFIG_UPDATED"})}catch(e){console.error("GhostLink Popup: Error changing privacy level:",e),this.showNotification("Failed to update privacy level","error"),this.updatePrivacyLevel()}finally{this.showLoading(!1)}}async handleViewReceipts(){try{const e=await this.sendMessage({type:"GET_RECEIPTS",data:{limit:10}});if(!e.success)throw new Error(e.error||"Failed to get receipts");{const t=e.data;this.showNotification(`Found ${t.length} privacy receipts`,"success")}}catch(e){console.error("GhostLink Popup: Error viewing receipts:",e),this.showNotification("Failed to load receipts","error")}}async handleExportData(){try{this.showLoading(!0);const e=await this.sendMessage({type:"EXPORT_DATA"});if(!e.success)throw new Error(e.error||"Failed to export data");{const t=e.data,i=new Blob([JSON.stringify(t,null,2)],{type:"application/json"}),n=URL.createObjectURL(i),s=document.createElement("a");s.href=n,s.download=`ghostlink-data-${(new Date).toISOString().split("T")[0]}.json`,document.body.appendChild(s),s.click(),document.body.removeChild(s),URL.revokeObjectURL(n),this.showNotification("Data exported successfully","success")}}catch(e){console.error("GhostLink Popup: Error exporting data:",e),this.showNotification("Failed to export data","error")}finally{this.showLoading(!1)}}showSettingsModal(){const e=document.getElementById("settings-modal");e?.classList.add("visible")}hideSettingsModal(){const e=document.getElementById("settings-modal");e?.classList.remove("visible")}hideAllModals(){document.querySelectorAll(".modal").forEach(e=>{e.classList.remove("visible")})}async handleSaveSettings(){if(this.config)try{this.showLoading(!0);const e=document.getElementById("enable-pii-detection").checked,t=document.getElementById("enable-differential-privacy").checked,i=document.getElementById("enable-semantic-generalization").checked,n=document.getElementById("enable-crypto-receipts").checked,s=document.getElementById("enable-relay-routing").checked,o=parseFloat(document.getElementById("noise-level").value),a=parseInt(document.getElementById("retention-days").value);this.config.enablePIIDetection=e,this.config.enableDifferentialPrivacy=t,this.config.enableSemanticGeneralization=i,this.config.enableCryptoReceipts=n,this.config.enableRelayRouting=s,this.config.noiseLevel=o,this.config.retentionDays=a;const c=await this.sendMessage({type:"UPDATE_PRIVACY_CONFIG",data:this.config});if(!c.success)throw new Error(c.error||"Failed to save settings");this.hideSettingsModal(),this.updateUI(),this.showNotification("Settings saved successfully","success"),this.currentTab?.id&&chrome.tabs.sendMessage(this.currentTab.id,{type:"CONFIG_UPDATED"})}catch(e){console.error("GhostLink Popup: Error saving settings:",e),this.showNotification("Failed to save settings","error")}finally{this.showLoading(!1)}}handleHelp(){chrome.tabs.create({url:"https://ghostlink.example.com/help"})}handleAbout(){chrome.tabs.create({url:"https://ghostlink.example.com/about"})}handleFeedback(){chrome.tabs.create({url:"https://ghostlink.example.com/feedback"})}showLoading(e){const t=document.getElementById("loading-overlay");e?t?.classList.remove("hidden"):t?.classList.add("hidden")}showNotification(e,t="success"){const i=document.getElementById("notification"),n=i?.querySelector(".notification-text");i&&n&&(n.textContent=e,i.className=`notification visible ${t}`,setTimeout(()=>{i.classList.remove("visible")},3e3))}hideNotification(){const e=document.getElementById("notification");e?.classList.remove("visible")}async sendMessage(e){return new Promise(t=>{chrome.runtime.sendMessage(e,e=>{t(e||{success:!1,error:"No response"})})})}}document.addEventListener("DOMContentLoaded",()=>{new e})})();